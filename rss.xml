<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>poor guy</title><link>https://poorguyorz.github.io/</link><description>A Test Blog</description><generator>Hugo 0.92.1 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>a_designer@qq.com (poor Guy)</managingEditor><webMaster>a_designer@qq.com (poor Guy)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Tue, 22 Feb 2022 12:20:37 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://poorguyorz.github.io/rss.xml"/><item><title>Envs</title><link>https://poorguyorz.github.io/posts/envs/</link><guid isPermaLink="true">https://poorguyorz.github.io/posts/envs/</guid><pubDate>Mon, 21 Feb 2022 19:00:25 +0800</pubDate><author>a_designer@qq.com (poor Guy)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="hugo">hugo&lt;/h2>
&lt;p>&lt;a href="https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb">https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb&lt;/a>&lt;/p>
&lt;p>可以使用aria2下载，ubuntu使用&lt;code>apt install aria2&lt;/code>直接安装工具，使用-s开启多路下载
aria2c -s 5 &lt;a href="https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb">https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.deb&lt;/a>&lt;/p>
&lt;p>manager用户&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/a76a93e8c662">https://www.jianshu.com/p/a76a93e8c662&lt;/a>&lt;/p></description><category domain="https://poorguyorz.github.io/posts/">posts</category></item><item><title>Docker</title><link>https://poorguyorz.github.io/posts/docker/</link><guid isPermaLink="true">https://poorguyorz.github.io/posts/docker/</guid><pubDate>Sun, 20 Feb 2022 21:17:58 +0800</pubDate><author>a_designer@qq.com (poor Guy)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h2 id="docker">Docker&lt;/h2>
&lt;p>新公司的产品的每一个模块是单独运行在容器中的，且由于是使用Java开发的，所以需要有频繁替换包的过程，之前只是简单的了解了docker，但是并没有深入的学习，这里记录docker的使用细节，以便于更好的工作，&lt;/p>
&lt;h2 id="基础概念">基础概念&lt;/h2>
&lt;p>Docker使用go开发的一种沙箱工具，他使得应用可以单独运行在沙箱中，通过端口映射或者volumes与外界进行交互。这可以让一个机器上可以运行多种不同环境的应用且互不干扰，例如一个比较大型的引用，使用的此方式单独维护一个模块，使得系统的可靠性大大增强&lt;/p>
&lt;ul>
&lt;li>容器&lt;br>
镜像运行的实例，一个镜像可以运行多个实例。&lt;/li>
&lt;li>镜像&lt;br>
一个完整的可运行的资源集合&lt;/li>
&lt;li>仓库&lt;br>
保存镜像&lt;/li>
&lt;/ul>
&lt;h2 id="使用">使用&lt;/h2>
&lt;p>这里记录高频次使用的功能，其他的后续记录&lt;/p>
&lt;ul>
&lt;li>
&lt;p>镜像的管理&lt;/p>
&lt;ul>
&lt;li>pull&lt;/li>
&lt;li>push&lt;/li>
&lt;li>commit&lt;br>
修改一个容器之后，使用commit在此基础上构建自己的容器&lt;/li>
&lt;li>build&lt;br>
创建一个镜像，使用docker build语句创建，需要自己编写Dockerfile，具体的编写规则可以参考nosipage&lt;/li>
&lt;li>rmi&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>容器的管理&lt;/p>
&lt;ul>
&lt;li>run&lt;br>
创建新的容器，且会使用run指定启动规则，例如端口的映射，volumes文件的指定，以及其他重要参数等，这个命令可以说重要，因为同一个镜像，使用不同参数启动之后，效果是不一样的，对于开发来时，更多的是参与后期的开发，如果不是前期的项目设计，这里了解即可，但是最好的是知道他的只要参数的意义，因为和其他命令有的是通用的，例如-i -t -p等&lt;/li>
&lt;li>start&lt;/li>
&lt;li>stop&lt;/li>
&lt;li>restart&lt;/li>
&lt;li>exec&lt;br>
使用此命令可以进入运行中的容器中区，exec -it xxx command&lt;/li>
&lt;li>attach&lt;/li>
&lt;li>rm&lt;/li>
&lt;li>logs&lt;/li>
&lt;li>cp&lt;br>
在本地和容器中传输文件&lt;/li>
&lt;li>export&lt;/li>
&lt;li>ps&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>其他命令基本在遇到的时候，再去查看&lt;/p></description><category domain="https://poorguyorz.github.io/posts/">posts</category><category domain="https://poorguyorz.github.io/tags/docker/">Docker</category></item><item><title>C++ logs</title><link>https://poorguyorz.github.io/posts/cpp/</link><guid isPermaLink="true">https://poorguyorz.github.io/posts/cpp/</guid><pubDate>Sun, 20 Feb 2022 20:54:01 +0800</pubDate><author>a_designer@qq.com (poor Guy)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;h1 id="编译器">编译器&lt;/h1>
&lt;p>把高级语言编译成可执行语言工具，分为前端后后端，前端值得是高级语言的解析，后端是指翻译解析之后的结果为机器语言&lt;/p>
&lt;ul>
&lt;li>
&lt;p>多文件
** 连接
多文件编译可以有两种方式，一是直接编译为一个可以执行文件，二是按模块或者按文件编译为库，然后连接到执行文件&lt;/p>
&lt;ul>
&lt;li>连接方式有两种，
一是静态连接，把所有的库文件打包到最后的生成文件中，优点是不需要额外的依赖外部环境，独立性强，缺点是文件体积大
二是动态链接，为了解决静态链接的缺点，执行文件在执行到库相关的代码的时候才加载库，有一点需要注意的是，程序运行的时候，在使用到动态库的时候才映射动态库到内存空间中。原理是编译待援在编译的时候，会更具声明生成函数的调用逻辑，但是只是一个地址跳转语句，所以，只要不调用，就不会有问题，当调用到了。才会加载库然后映射库的地址，这个完整的过程称为重定向。
&lt;a href="https://joytsing.github.io/posts/59293/">动态连接&lt;/a>
&lt;a href="https://www.bookstack.cn/read/open-c-book/doc-README.md">C语言编程透视&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>声明
声明是为了在编译的时候编译器能进行完整的上下文编译。他需要更具声明来确定编译信息，否则编译器无法确定编译中的语句信息，声明可以辅助完成这个情况， 所以理论上编译的时候是可以不需要实现的，可以在其他编译单元中实现声明的函数，其声明的文件可以不引用头文件，即两个编译单元完全可以无任何联系，除了声明之外，在连接的时候，连接器会根据编译出来的信息去确定函数调用情况，这里有一个问题，按上述的描述，是一个声明对应一个实现，如果有一个声明对应多个实现呢
== ： 会有覆盖问题，如果多个动态链接库都有同一个声明的实现，则连接的时候连接第一个，后面的则忽略，这也提醒我们，在大型项目中，避免同名全局函数或者变量，使用namespace或者static限制作用域，&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">g&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="n">tt&lt;/span> &lt;span class="p">..&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cpp&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">ldl&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">libhellolib&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">so&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">libhellolib1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">so&lt;/span>
&lt;span class="n">LD_LIBRARY_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">PWD&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">tt&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>头文件，避免公用代码的重复，预处理时展开头文件，需要使用#pragma once避免重复引用，头文件只是简单的文件替换，理论上的可以替换任何文本。&lt;/li>
&lt;/ul>
&lt;p>cmake
* 子模块，使用add_subdirectory引入
* 第三方库
* 只是头文件，直接指定头文件目录编译即可
* 使用子模块
* 使用为连接库
* 使用git模块&lt;/p>
&lt;ul>
&lt;li>
&lt;p>STL&lt;/p>
&lt;ul>
&lt;li>重点为容器和算法&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>lambda表达式，实质上是仿函数，是一个结构体实现()运算的重载，捕获的时候按照声明的新式捕获参数，建议使用的时候明确使用的参数，使用哪个就捕获哪一个，否则他实际上会占据一定的大小的，配合std::function使用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CTAD &amp;mdash; complie-time argument deduction，编译器参数推断，C++17引入的，可以在编译器按照上下文推断类型，具体表现在lambda参数可以使用auto，容器可以不适用&amp;lt;&amp;gt;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ranges
&lt;a href="https://zhuanlan.zhihu.com/p/350068132">https://zhuanlan.zhihu.com/p/350068132&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>module&lt;/p>
&lt;/li>
&lt;li>
&lt;p>raii 获取资源即初始化，释放资源即销毁，具体的实现是使用构造函数和析构函数，当前的实现为智能指针，其他用户自己管理的资源最好也使用raii，遮这样在函数有多个出口的时候，就不会有意外的情况，本质上还是自己管理资源，不想其他的语言有GC&lt;/p>
&lt;ul>
&lt;li>异常安全，C++中异常机制在回溯栈的时候会析构对象，所以如果没有实现RAII，则自己管理的内存则无法释放，C++的异常可以发生在任何地方，如果发生在析构函数中，则需要自己处理，不要在析构函数中抛出异常的，在构造函数中的时候，也需要捕获异常然后释放已经申请的资源，构造函数异常的时候，是不会调用析构函数的，&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>构造函数&lt;/p>
&lt;ul>
&lt;li>构造函数有时候会隐士的生成对象，即使没有显示声明，使用explicit避免这种情况，单参数的时候会，多参数使用{}，调用的时候也会
&lt;ul>
&lt;li>直接使用多参数的时候，()和{}是有区别的，()除了正常的使用外，其他情况不具备特殊含义&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">};&lt;/span>
&lt;span class="n">tt&lt;/span> &lt;span class="nf">t&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>tt q{1, 3};
tt w = {1, 4};
tests({1,5});
```
上面的语句1正确，a的值为11，2错误，{}这种用法的意义是参数列表，是会构造对象的。ps，调用构造函数的时候，有具体的对象的时候两种括号无差别，但是无对象的时候有区别，如上，细品&lt;/p>
&lt;ul>
&lt;li>默认构造函数&lt;/li>
&lt;li>拷贝构造( A(A const &amp;amp; a) ) A a = aa;&lt;/li>
&lt;li>移动构造( A(A &amp;amp;&amp;amp; a) )&lt;/li>
&lt;li>赋值构造( A&amp;amp;operator=(A const&amp;amp; a) ) A a; a = aa;&lt;/li>
&lt;li>移动赋值( A&amp;amp;operator=(A &amp;amp;&amp;amp; a) )&lt;/li>
&lt;li>=delte和=default&lt;/li>
&lt;li>类内部变量可以赋初值&lt;/li>
&lt;li>三五法则
&lt;ul>
&lt;li>拷贝构造或者赋值构造需要区分深拷贝和浅拷贝，这也是构造函数肯可能引入的问题，例如浅拷贝导致内存的重复释放，&lt;/li>
&lt;li>各种构造函数更多的是需要考虑当前对象的来源，如果是直接从零开始的，则是普通的构造函数，如果是从别的对象来的，则需要考虑深浅拷贝的问题，以及构造之后别的对象是否还需要的问题，简而言之，就是资源细节上的考虑，只要内涉及到资源的操作，则需要多话费一些心思区考虑，&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>函数返回多值&lt;/p>
&lt;ul>
&lt;li>使用结构体打包，结构体可以使用{}任意构造，且好处是可以获取变量的名字&lt;/li>
&lt;li>tuple&lt;/li>
&lt;li>pair&lt;/li>
&lt;li>各种结构方式&lt;/li>
&lt;li>结构化绑定，类似rust&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>option 成功则优质返回，否则返回nullopt，搭配has_value等使用，类似rust&lt;/p>
&lt;/li>
&lt;li>
&lt;p>variant&lt;/p>
&lt;/li>
&lt;li>
&lt;p>智能指针&lt;/p>
&lt;ul>
&lt;li>RAII的具体体现&lt;/li>
&lt;li>unique_ptr
禁止拷贝，只允许移动，避免产生多个对象&lt;/li>
&lt;li>shared_ptr
使用计数器记录对象，允许存在多个对象，相互引用问题，&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>限于篇幅，此处放出一些扩展知识供学有余力的同学研究：
P-IMPL 模式
虚函数与纯虚函数
拷贝如何作为虚函数
std::unique_ptr::release()
std::enable_shared_from_this
dynamic_cast
std::dynamic_pointer_cast
运算符重载
右值引用 &amp;amp;&amp;amp;
std::shared_ptr&lt;void>和 std::any
只提供了关键字，详细信息请善用搜索引擎：bing.com。（不要用 baidu.com，那个是搜广告用的）
如果感兴趣，我可以增添一节专门讲动态多态。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>模板&lt;/p>
&lt;ul>
&lt;li>更加广义上的重载机制，模板会在编译的时候，在依据上下文信息编译代码，调用的时候可以使用&amp;lt;&amp;gt;声明模板参数，在17之后有CTAD，可以省略这一步，直接和调用普通函数一致，但是需要明确的是他是需要从上下文进行类型的推到，如果编译时上下文无法推到类型信息，则还是需要使用尖括号，&lt;/li>
&lt;li>模板可以是CLASS或者typename，也可以是整形，例如tuple的get函数使用整形模板参数指定参数index，但是参数只能是整形，不知道是从哪里开的口子，
&lt;ul>
&lt;li>此时模板参数必须是编译期间可以确定的常量，如果是表达式，可以使用constexpri修饰，&lt;/li>
&lt;li>使用整形的一个特殊原因是由于模板参数是编译器编译期间可以确定的，则此时可以根据模板参数进行代码优化，例如函数的参数列表使用bool确定函数是否是debug模式，此时由于参数是变量，所以无法优化，必须有一个if跳转逻辑。但是假如是模板参数，则会在编译的时候确定生成的代码是什么，可以直接在代码生成的时候优化掉&lt;/li>
&lt;li>编译期常量，是编译器在编译期间的可以通过直接运算或者其他方式运算得到一个确切的值，需要使用constexpr修饰，否则即使是一个值，他也不能用在有要求的地方，例如模板参数&lt;/li>
&lt;li>模板的惰性编译，
&lt;ul>
&lt;li>模板会工具编译时候遇到的模板参数生成不同的函数，函数名字的参数类型不一样，具体可以使用objdump查看生成的函数名，所以一个模板可能有多份代码的生成，需要考虑实际的使用情况，如果一个模板没有使用到，此时他的模板参数按什么生成，所以模板是在遇到调用的时候才生成的，是惰性的，此过程隐含两个信息，一是编译的时候需要调用才生成代码，二是编译的时候能找到模板的说明代码，因为编译是分为不同的编译单元的，如果在编译模板的编译单元的时候没有发现模板调用，导致没有生成代码，其他的编译单元发现了调用，但是模板的编译单元已编译完成，所以模板需要注意的是使用的时候最好确保所有的使用的代码都能看见模板实现，简单的就是模板最好放在头文件实现，不要分开。否则需要在模板的编译单元里面添加模板参数的声明。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>auto只是推到类型，不包含引用信息和const，可以手动指定&lt;/p>
&lt;/li>
&lt;li>
&lt;p>if constexpr&lt;/p>
&lt;/li>
&lt;li>
&lt;p>int&amp;amp; int&amp;amp;&amp;amp; const int &amp;amp;&lt;/p>
&lt;ul>
&lt;li>常饮用范围最小，其他两种引用都可以转换为长应用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description><category domain="https://poorguyorz.github.io/posts/">posts</category><category domain="https://poorguyorz.github.io/tags/test_tag/">test_tag</category><category domain="https://poorguyorz.github.io/tags/asd/">asd</category></item><item><title>Hello World</title><link>https://poorguyorz.github.io/posts/hello-world/</link><guid isPermaLink="true">https://poorguyorz.github.io/posts/hello-world/</guid><pubDate>Mon, 07 Feb 2022 03:54:01 +0800</pubDate><author>a_designer@qq.com (poor Guy)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>Welcome to &lt;a href="https://hexo.io/">Hexo&lt;/a>! This is your very first post. Check &lt;a href="https://hexo.io/docs/">documentation&lt;/a> for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href="https://hexo.io/docs/troubleshooting.html">troubleshooting&lt;/a> or you can ask me on &lt;a href="https://github.com/hexojs/hexo/issues">GitHub&lt;/a>.&lt;/p>
&lt;h2 id="quick-start">Quick Start&lt;/h2>
&lt;h3 id="create-a-new-post">Create a new post&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hexo new &lt;span class="s2">&amp;#34;My New Post&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/writing.html">Writing&lt;/a>&lt;/p>
&lt;h3 id="run-server">Run server&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hexo server
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/server.html">Server&lt;/a>&lt;/p>
&lt;!-- more -->
&lt;h3 id="generate-static-files">Generate static files&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hexo generate
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/generating.html">Generating&lt;/a>&lt;/p>
&lt;h3 id="deploy-to-remote-sites">Deploy to remote sites&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ hexo deploy
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>More info: &lt;a href="https://hexo.io/docs/one-command-deployment.html">Deployment&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span> &lt;span class="p">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>$f(x) = a+b$&lt;/p>
&lt;p>​
This is my first post on the site. I hope that you like it!
​&lt;/p>
&lt;h2 id="welcome-function">Welcome Function&lt;/h2>
&lt;p>​
Here is a little Python function to welcome you:
​
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">hello_world&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">print&lt;/span> &lt;span class="s2">&amp;#34;Hello there!&amp;#34;&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="k">def&lt;/span> &lt;span class="nf">hello_world&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="nb">print&lt;/span> &lt;span class="s2">&amp;#34;Hello there!&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description><category domain="https://poorguyorz.github.io/posts/">posts</category><category domain="https://poorguyorz.github.io/tags/test_tag/">test_tag</category><category domain="https://poorguyorz.github.io/tags/asd/">asd</category></item></channel></rss>